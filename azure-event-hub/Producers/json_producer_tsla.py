# -*- coding: utf-8 -*-
"""JSON-PRODUCER_TSLA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11BFAtQB75CH9T2g59kmg3NTaO4Uuc9BR
"""

!pip install azure-eventhub

import json
import time
import requests
from azure.eventhub import EventHubProducerClient, EventData

CONNECTION_STR = "<your-event-hub-connection-string-with-send-permission>"
EVENT_HUB_NAME = "<your-event-hub-name>"
stock_symbol = "TSLA"

def fetch_data_from_api():

    response = requests.get('https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=TSLA&interval=1min&month=2024-11&outputsize=full&apikey=<api-key>')

    if response.status_code == 200:
        return response.json()  # Return JSON response
    else:
        print(f"Error fetching data: {response.status_code} - {response.text}")
        return None


def send_data_to_eventhub(data):
    """
    Sends JSON data to Azure Event Hub.
    """
    producer = EventHubProducerClient.from_connection_string(
        conn_str=CONNECTION_STR, eventhub_name=EVENT_HUB_NAME
    )

    # Format the data into EventData
    event_data = EventData(json.dumps(data))
    with producer:
        producer.send_batch([event_data], partition_key=stock_symbol)
    print(f"Sent data to Event Hub: {data} to partition key {stock_symbol}")


def main():
    # Fetch data from API once
    api_data = fetch_data_from_api()
    if api_data and "Time Series (1min)" in api_data:
        time_series = api_data["Time Series (1min)"]
        for timestamp, details in time_series.items():
            # Format the data
            event = {
                "timestamp": timestamp,
                "open": float(details["1. open"]),
                "high": float(details["2. high"]),
                "low": float(details["3. low"]),
                "close": float(details["4. close"]),
                "volume": int(details["5. volume"]),

            }
            # Send to Event Hub
            send_data_to_eventhub(event)
            time.sleep(1)

if __name__ == "__main__":
    main()

