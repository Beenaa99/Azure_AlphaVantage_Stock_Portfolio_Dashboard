# -*- coding: utf-8 -*-
"""NVDA-JSON-PRODUCER.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a7rhMi5msE9ryEbLCEAuHPCJIsfsnp7J
"""

!pip install azure-eventhub

import json
import time
import requests
from azure.eventhub import EventHubProducerClient, EventData

CONNECTION_STR = "Endpoint=sb://intraday-stock-ns.servicebus.windows.net/;SharedAccessKeyName=producer-policy;SharedAccessKey=KYx6NuNrdjo07JmIbDMv7yrlISt1BdVdo+AEhDDTsfY="
EVENT_HUB_NAME = "intraday-stock-1"
stock_symbol = "NVDA"

def fetch_data_from_api():

    response = requests.get('https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=NVDA&interval=1min&date=2024-11&outputsize=full&apikey=V2SAP2L4HP2N4BBP')

    if response.status_code == 200:
        return response.json()  # Return JSON response
    else:
        print(f"Error fetching data: {response.status_code} - {response.text}")
        return None

"""https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=NVDA&interval=1min&month=2024-11&outputsize=full&apikey=V2SAP2L4HP2N4BBP"""

def send_data_to_eventhub(data):
    """
    Sends JSON data to Azure Event Hub.
    """
    producer = EventHubProducerClient.from_connection_string(
        conn_str=CONNECTION_STR, eventhub_name=EVENT_HUB_NAME
    )

    # Format the data into EventData
    event_data = EventData(json.dumps(data))  # Convert JSON object to string
    with producer:
        producer.send_batch([event_data], partition_key=stock_symbol)
    print(f"Sent data to Event Hub: {data} to partition key {stock_symbol}")


def main():
    # Fetch data from API once
    api_data = fetch_data_from_api()
    if api_data and "Time Series (1min)" in api_data:
        time_series = api_data["Time Series (1min)"]

        # Sort the time_series keys (timestamps) in ascending order
        sorted_timestamps = sorted(time_series.keys())

        for timestamp in sorted_timestamps:
            details = time_series[timestamp]
            # Format the data
            event = {
                "timestamp": timestamp,
                "open": float(details["1. open"]),
                "high": float(details["2. high"]),
                "low": float(details["3. low"]),
                "close": float(details["4. close"]),
                "volume": int(details["5. volume"]),
            }
            # Send to Event Hub
            send_data_to_eventhub(event)
            time.sleep(3)

if __name__ == "__main__":
    main()

